#############################################
####  SWIO Run-Time Configuration File  #####
#############################################
#
#  Imported fields
#
import_fields::
    O_plus_density
    H_plus_density
    He_plus_density
    N_plus_density
    NO_plus_density
    O2_plus_density
    N2_plus_density
    ion_temperature
    electron_temperature
    eastward_exb_velocity
    northward_exb_velocity
    upward_exb_velocity
::

output_fields::
    O_plus_density
    H_plus_density
    He_plus_density
    N_plus_density
    NO_plus_density
    O2_plus_density
    N2_plus_density
    ion_temperature
    electron_temperature
::

#
#  Computed fields
#
#  Use SWIO internal calculator to compute additional
#  output fields from input ones, according to the syntax
#  below:
#
#  <function_name> <input_field1> ... <input_fieldN> [<input_parm1> ... <input_parmL>] <output_field1> <output_units1> ... <output_fieldM> <output_unitsM> <scaling_factor>
#
#  Available functions are:
#  - column_integrate
#  - column_max_point
#  - column_max_region
#
#  Note that <scaling_factor> is optional as it may or may not be used depending on the function
#
compute_fields::
    column_interpolate  eastward_exb_velocity    height    300000.    u_exb_300  "m s-1"
    column_interpolate  northward_exb_velocity   height    300000.    v_exb_300  "m s-1"
    column_interpolate  upward_exb_velocity      height    300000.    w_exb_300  "m s-1"
    column_interpolate  eastward_exb_velocity    height    840000.    u_exb_840  "m s-1"
    column_interpolate  northward_exb_velocity   height    840000.    v_exb_840  "m s-1"
    column_interpolate  upward_exb_velocity      height    840000.    w_exb_840  "m s-1"
::

#
# Output file format.
#
# Choose from:
# - hdf5
# - pnetcdf or parallel-netcdf
#
output_format: pnetcdf
#
# Output datatype
#
# Supported datatypes for output variables are:
# - integer: write variables as integers
# - float  : write variables as real, single precision
# - double : write variables as real, double precision
# - native : write variables using their original type
#
output_datatype: float
#
# Output file prefix.
#
# Output file names are created as:
#   <prefix>.<datetime>.<suffix>
# where:
#   <prefix>   : is the string provided via
#                output_file_prefix keyword
#   <datetime> : inported field timestamp,
#                formatted as: YYYYMMDD_hhmmss
#   <suffix>   : determined from output format:
#                'hd5' for hdf5, 'nc' for pnetcdf
#
output_file_prefix: SWIO/${CDUMP}.t${cyc}z.ipe60
#
# Output metadata.
#
# Metadata can be added to output files as global
# string attributes created from <key> <value>
# row entries in the table below. If <value> is
# missing, it will be set to "N/A".
#
output_metadata::
  init_date     $SWIO_IDATE
  start_date    $SWIO_SDATE
  end_date      $SWIO_EDATE
  fcst_date     __swio_field_timestamp__
  run_type      $CDUMP
  model         ipe
  cadence       60
::
#
# Output grid type.
# 
# Supported types are:
# - latlon: 2D/3D regular lat/lon spherical grid
# - none  : native (imported) grid/mesh
#
output_grid_type: latlon
#
# The following keywords are read only if grid
# type is 'latlon'
#
# Output grid size.
#
# Provides the lat/lon grid resolution as
#   #longitudes #latitudes [#levels]
# If #levels is missing, a 2D lat/lon grid will be built
#
# If #levels > 0, the minimum and maximum value of the
# vertical coordinate (km) will be read via the 
# 'output_grid_level_range' keyword below.
#
# IF #levels <=0, the grid's vertical levels are read
# from the 'output_grid_level_values' table (km)
#
#output_grid_size: 90 91 183
output_grid_size: 90 91 0
#
# Minimin and maximum values of vertical coordinate (km)
# Used if #levels > 0
#
output_grid_level_range: 90. 1000.
#
# List of vertical levels (km)
# Used if #levels <= 0
#
output_grid_level_values::
   90.
   95.
  100.
  105.
  110.
  115.
  120.
  125.
  130.
  135.
  140.
  145.
  150.
  155.
  160.
  165.
  170.
  175.
  180.
  185.
  190.
  195.
  200.
  210.
  220.
  230.
  240.
  250.
  260.
  270.
  280.
  290.
  300.
  310.
  320.
  330.
  340.
  350.
  360.
  370.
  380.
  390.
  400.
  410.
  420.
  430.
  440.
  450.
  460.
  470.
  480.
  490.
  500.
  510.
  520.
  530.
  540.
  550.
  560.
  570.
  580.
  590.
  600.
  610.
  620.
  630.
  640.
  650.
  660.
  670.
  680.
  690.
  700.
  750.
  800.
  850.
  900.
  950.
 1000.
 1100.
 1200.
 1300.
 1400.
 1500.
 1600.
 1700.
 1800.
 1900.
 2000.
::
#
# If true, this flag transforms the vertical coordinate (v),
# assumed in km, to heights (h) relative to the average
# Earth's radius (R=6,371.2 km), accordina to the formula:
#   h = 1 + v/R
#
output_grid_level_relative: false
